{"ast":null,"code":"var _jsxFileName = \"/Users/veronicachang/Documents/hw7/src/GameManager.js\";\nimport React, { Component } from \"react\";\nimport firebase from \"firebase/app\";\nimport './css/room.css';\nimport { Input, InputGroup, InputGroupAddon, Label, Button, Col, Row, Form, Modal, ModalHeader, ModalFooter, ModalBody } from \"reactstrap\";\nimport { Redirect } from 'react-router-dom';\nimport Chart from './Analysis';\n\nconst questionFile = require(\"./questions.json\");\n\nconst MAX_QUESTIONS = 15;\nconst MIN_QUESTIONS = 1;\nexport class GameManager extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      // Check the inputs are valid\n      if (this.isValid(e.target.value, e.target.name)) {\n        // Remove Error message\n        document.getElementById('fname').style.borderColor = \"grey\";\n        document.getElementById('error').style.visibility = \"hidden\";\n        let str = e.target.value.replace(/ /g, '_');\n        this.setState({\n          [e.target.name]: str\n        });\n      } else if (e.target.name === 'numQuestions') {\n        this.setState({\n          [e.target.name]: e.target.value\n        });\n      } else {\n        this.setState({\n          fname: \"\"\n        });\n        e.target.value = \"\";\n        document.getElementById('error').innerHTML = \"Please enter a correct name without symbols.\";\n        document.getElementById('error').style.visibility = \"visible\";\n        document.getElementById('fname').style.borderColor = \"red\";\n      }\n    };\n\n    this.onClick = e => {\n      this.setState({\n        [e.target.name]: e.target.checked\n      });\n    };\n\n    this.state = {\n      fname: \"First Name\",\n      uid: \"\",\n      roomName: \"\",\n      numQuestions: 5,\n      toggleAnalysis: false,\n      created: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.handleCreateRoom = this.handleCreateRoom.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      uid: this.props.data.uid,\n      roomName: \"Room-\" + this.props.data.uid\n    });\n  }\n\n  handleCreateRoom() {\n    let roomRef = firebase.database().ref(\"Rooms\").child(this.state.uid);\n    roomRef.set({\n      organizer: this.state.fname,\n      uid: this.state.uid,\n      room_name: this.state.roomName,\n      settings: {\n        Number_Questions: this.state.numQuestions,\n        showAnalysis: this.state.toggleAnalysis\n      },\n      analysis: {\n        placeholder: \"Placeholder\"\n      }\n    });\n    this.setState({\n      created: true\n    });\n  }\n\n  isValid(str, field) {\n    if (field === 'fname' && /^[a-zA-Z ]+$/.test(str)) {\n      return true;\n    } else if (field === 'roomName') {\n      return true;\n    } else if (str === \"\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    let isEnabled = this.state.fname !== \"\";\n    let button = null;\n\n    if (this.state.created) {\n      return React.createElement(Redirect, {\n        push: true,\n        to: {\n          pathname: \"/\" + this.state.roomName + \"/Categories/\",\n          state: this.state\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      });\n    } else {\n      button = React.createElement(Button, {\n        onClick: this.handleCreateRoom,\n        disabled: !isEnabled,\n        style: {\n          fontSize: \"18px\",\n          borderRadius: \"20px\",\n          width: \"200px\",\n          height: \"2em\",\n          background: \"#226597\",\n          color: \"white\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          padding: \"0px\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          marginTop: \"50px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Create Room\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"errorContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"error\",\n      style: {\n        visibility: 'hidden'\n      },\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), React.createElement(Form, {\n      id: \"newRoom-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Settings\"), React.createElement(Label, {\n      style: {\n        marginTop: \"40px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \" Organizer Name \"), React.createElement(Input, {\n      placeholder: this.state.fname,\n      name: \"fname\",\n      onChange: this.handleChange,\n      id: \"fname\",\n      style: {\n        borderRadius: \"20px\",\n        paddingLeft: \"24px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(Label, {\n      style: {\n        marginTop: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Custom Room Name\"), React.createElement(Input, {\n      placeholder: this.state.roomName,\n      name: \"roomName\",\n      onChange: this.handleChange,\n      id: \"roomName\",\n      style: {\n        borderRadius: \"20px\",\n        paddingLeft: \"24px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(Label, {\n      style: {\n        marginTop: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Number of Icebreaker Questions\"), React.createElement(InputGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(Input, {\n      placeholder: this.state.numQuestions,\n      name: \"numQuestions\",\n      min: MIN_QUESTIONS,\n      max: MAX_QUESTIONS,\n      type: \"number\",\n      step: \"1\",\n      defaultValue: 5,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(InputGroupAddon, {\n      addonType: \"append\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Questions\")), React.createElement(Label, {\n      check: true,\n      style: {\n        marginTop: \"30px\",\n        marginLeft: \"40px\",\n        fontSize: \"16px\",\n        color: \"#226597\",\n        fontWeight: \"600\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      name: \"toggleAnalysis\",\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), \" Show Analysis\"), button));\n  }\n\n}\nexport class Categories extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleQuestionDeck = e => {\n      let category = e.target.id;\n      let deck = Object.entries(this.getQuestions(category));\n\n      if (deck !== undefined) {\n        let max = parseInt(this.parentState.numQuestions);\n        let questionDeck = [];\n\n        for (let obj of deck) {\n          questionDeck.push(obj);\n\n          if (questionDeck.length === max) {\n            this.setDeck(questionDeck, category);\n            break;\n          }\n        }\n      } else {\n        alert(\"An error occured while finding the questions, please try again later or contact the owner of the website\");\n      }\n    };\n\n    this.state = {\n      questions: [],\n      toggleCustom: false,\n      go: false,\n      selected: \"\"\n    };\n    this.handleRandomDeck = this.handleRandomDeck.bind(this);\n    this.toggleCustom = this.toggleCustom.bind(this);\n    this.redirect = this.redirect.bind(this);\n    this.setDeck = this.setDeck.bind(this);\n    this.parentState = this.props.location.state;\n  }\n\n  componentDidMount() {\n    // Check file whether file is empty\n    if (questionFile.length === 0) {\n      alert(\"An error occured while finding the questions, please try again later or contact the owner of the website\");\n    }\n  }\n\n  setDeck(deck, category) {\n    this.setState({\n      questions: deck,\n      selected: category\n    });\n  }\n\n  getQuestions(category) {\n    for (let questionSet of questionFile) {\n      if (questionSet.category === category) {\n        return questionSet.questions;\n      }\n    }\n\n    return undefined;\n  }\n\n  handleRandomDeck() {\n    let max = parseInt(this.parentState.numQuestions);\n    let deck = [];\n\n    for (let category of questionFile) {\n      let questionDeck = Object.entries(category.questions);\n      let randomTotal = Math.floor(Math.random() * (4 - 1) + 1);\n      let count = 0;\n\n      while (count <= randomTotal && deck.length !== max) {\n        let index = Math.floor(Math.random() * 15);\n\n        if (!deck.includes(questionDeck[index])) {\n          deck.push(questionDeck[index]);\n        } else {\n          deck.push(questionDeck[index + 1 % 2]);\n        } // Check deck has correct number of questions and prevent from adding more questions\n\n\n        if (deck.length === max) {\n          this.setDeck(deck, \"random\");\n          break;\n        }\n\n        count++;\n      }\n    }\n  }\n\n  toggleCustom() {\n    this.setState({\n      toggleCustom: !this.state.toggleCustom\n    });\n  }\n\n  redirect() {\n    this.setState({\n      go: !this.state.go\n    });\n  }\n\n  render() {\n    let isEnabled = this.state.questions.length === 0;\n    let goButton = null;\n\n    if (this.state.go) {\n      return React.createElement(Redirect, {\n        push: true,\n        to: {\n          pathname: \"/\" + this.parentState.roomName + \"/Room/\",\n          uid: this.parentState.uid,\n          deck: this.state.questions\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      });\n    } else {\n      goButton = React.createElement(\"button\", {\n        className: \"goToRoom\",\n        disabled: isEnabled,\n        onClick: this.redirect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, \"Go to Room\");\n    }\n\n    return React.createElement(\"div\", {\n      id: \"category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"Categories\"), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: this.state.selected === \"travel\" ? \"selected\" : \"travel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cata\",\n      onClick: this.handleQuestionDeck,\n      id: \"travel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"cataimg\",\n      onClick: this.handleQuestionDeck,\n      src: require(\"./icons/travel.png\"),\n      id: \"travel\",\n      alt: \"travel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, \"Travel\")), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: this.state.selected === \"food\" ? \"selected\" : \"food\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cata\",\n      onClick: this.handleQuestionDeck,\n      id: \"food\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"cataimg\",\n      onClick: this.handleQuestionDeck,\n      src: require(\"./icons/food.png\"),\n      id: \"food\",\n      alt: \"food\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \"Food\")), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: this.state.selected === \"sports\" ? \"selected\" : \"sports\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cata\",\n      onClick: this.handleQuestionDeck,\n      id: \"sports\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"cataimg\",\n      onClick: this.handleQuestionDeck,\n      src: require(\"./icons/sports.png\"),\n      id: \"sports\",\n      alt: \"sports\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"Sports\"))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: this.state.selected === \"music\" ? \"selected\" : \"music\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cata\",\n      onClick: this.handleQuestionDeck,\n      id: \"music\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"cataimg\",\n      onClick: this.handleQuestionDeck,\n      src: require(\"./icons/music.png\"),\n      id: \"music\",\n      alt: \"music\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, \"Music\")), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: this.state.selected === \"movies\" ? \"selected\" : \"movies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cata\",\n      onClick: this.handleQuestionDeck,\n      id: \"movies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"cataimg\",\n      onClick: this.handleQuestionDeck,\n      src: require(\"./icons/movie.png\"),\n      id: \"movies\",\n      alt: \"movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"Movies\")), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: this.state.selected === \"books\" ? \"selected\" : \"books\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cata\",\n      onClick: this.handleQuestionDeck,\n      id: \"books\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"cataimg\",\n      onClick: this.handleQuestionDeck,\n      src: require(\"./icons/book.png\"),\n      id: \"books\",\n      alt: \"book\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, \"Books\"))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: this.state.selected === \"animals\" ? \"selected\" : \"animals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cata\",\n      onClick: this.handleQuestionDeck,\n      id: \"animals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"cataimg\",\n      onClick: this.handleQuestionDeck,\n      src: require(\"./icons/animal.png\"),\n      id: \"animals\",\n      alt: \"animal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"Animals\")), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: this.state.selected === \"random\" ? \"selected\" : \"random\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cata\",\n      onClick: this.handleRandomDeck,\n      id: \"random\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"cataimg\",\n      onClick: this.handleRandomDeck,\n      src: require(\"./icons/random.png\"),\n      id: \"random\",\n      alt: \"random\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \"Random\")), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: this.state.selected === \"customized\" ? \"selected\" : \"customized\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cata\",\n      onClick: this.toggleCustom,\n      id: \"customized\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"cataimg\",\n      onClick: this.toggleCustom,\n      src: require(\"./icons/customized.png\"),\n      id: \"customized\",\n      alt: \"customized\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }))), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"Custom\"))), React.createElement(AddQuestion, {\n      fun: this.setDeck,\n      open: this.state.toggleCustom,\n      toggle: this.toggleCustom,\n      state: this.parentState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }), React.createElement(ModalQuestions, {\n      questionList: this.state.questions,\n      max: this.parentState.numQuestions,\n      uid: this.parentState.uid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }), goButton);\n  }\n\n}\n\nclass AddQuestion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      // Check the inputs are valid\n      if (this.isValid(e.target.value)) {\n        // Remove Error message\n        document.getElementById(e.target.name).style.borderColor = \"inherit\";\n        document.getElementById('error').style.visibility = \"hidden\";\n        this.setState({\n          [e.target.name]: e.target.value.trim()\n        });\n      } else {\n        this.setState({\n          [e.target.name]: \"\"\n        });\n        e.target.value = \"\";\n        document.getElementById('error').innerHTML = \"Please enter a correct name without symbols.\";\n        document.getElementById('error').style.visibility = \"visible\";\n        document.getElementById(e.target.name).style.borderColor = \"red\";\n      }\n    };\n\n    this.handleSelected = e => {\n      this.setState({\n        selected: e.target.value\n      });\n    };\n\n    this.state = {\n      customDeck: [],\n      question: \"\",\n      answer2: \"\",\n      answer1: \"\",\n      selected: \"\"\n    };\n    this.removeQuestion = this.removeQuestion.bind(this);\n    this.setDeck = this.setDeck.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleNewQuestions = this.handleNewQuestions.bind(this);\n    this.handleSelected = this.handleSelected.bind(this);\n  }\n\n  handleNewQuestions() {\n    let deck = this.state.customDeck;\n\n    if (this.isDuplicate()) {\n      // Remove Error message\n      document.getElementById('error').style.visibility = \"hidden\";\n      deck.push([this.state.question, [this.state.answer1, this.state.answer2]]);\n      document.getElementById(\"message\").innerHTML = \"You have \" + (parseInt(this.props.state.numQuestions) - this.state.customDeck.length) + \" questions to make!\";\n    } else {\n      this.setState({\n        question: \"\",\n        answer1: \"\",\n        answer2: \"\"\n      });\n      document.getElementById('addForm').reset();\n      document.getElementById('error').innerHTML = \"This is a duplicate question\";\n      document.getElementById('error').style.visibility = \"visible\";\n    }\n\n    this.setState({\n      customDeck: deck,\n      question: \"\",\n      answer1: \"\",\n      answer2: \"\"\n    });\n    document.getElementById('addForm').reset();\n    this.renderOptions();\n  }\n\n  isValid(str) {\n    if (/^[a-zA-Z0-9? ]+$/.test(str)) {\n      return true;\n    } else if (str === \"\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  isDuplicate() {\n    let deck = this.state.customDeck;\n\n    if (deck.length !== 0) {\n      for (let obj of deck) {\n        if (obj[0] === this.state.question) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  renderOptions() {\n    let data = this.state.customDeck;\n    let select = document.getElementById('customQuestion');\n\n    if (select !== null) {\n      select.innerHTML = \"\";\n    }\n\n    for (let obj of data) {\n      let opt = document.createElement('option');\n      let key = obj[0];\n      let val = obj[1];\n      opt.value = key;\n      opt.selected = this.state.selected === opt.value;\n      opt.innerHTML = key + \": \" + val;\n      select.appendChild(opt);\n    }\n  }\n\n  removeQuestion() {\n    let deck = this.state.customDeck;\n\n    for (let entry of deck) {\n      if (entry[0] === this.state.selected) {\n        deck.splice(entry[0], 1);\n      }\n    }\n\n    this.renderOptions();\n    document.getElementById(\"message\").innerHTML = \"You have \" + (parseInt(this.props.state.numQuestions) - this.state.customDeck.length) + \" questions to make!\";\n  }\n\n  setDeck() {\n    this.props.fun(this.state.customDeck, \"customized\");\n    this.props.toggle();\n    this.setState({\n      customDeck: []\n    });\n  }\n\n  render() {\n    const closeBtn = React.createElement(\"button\", {\n      className: \"close\",\n      onClick: this.props.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, \"\\xD7\");\n    let isEnabled = this.state.question !== \"\" && this.state.answer1 !== \"\" && this.state.answer2 !== \"\";\n    let maxReached = parseInt(this.props.state.numQuestions) === this.state.customDeck.length;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      className: \"addCustomQuestions\",\n      isOpen: this.props.open,\n      toggle: this.props.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      close: closeBtn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, \"Build your own deck of questions!\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"errorContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"error\",\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      style: {\n        visibility: 'hidden'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      id: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, \"You have \", parseInt(this.props.state.numQuestions) - this.state.customDeck.length, \" questions to make!\"), React.createElement(Form, {\n      id: \"addForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, React.createElement(Col, {\n      className: \"addQuestionContainer\",\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, \"Question\"), React.createElement(Input, {\n      type: \"question\",\n      name: \"question\",\n      id: \"question\",\n      placeholder: this.state.question,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }), React.createElement(Label, {\n      for: \"exampleCity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, \"Answer 1\"), React.createElement(Input, {\n      type: \"answer1\",\n      name: \"answer1\",\n      id: \"answer1\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }), React.createElement(Label, {\n      for: \"exampleState\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, \"Answer 2\"), React.createElement(Input, {\n      type: \"answer2\",\n      name: \"answer2\",\n      id: \"answer2\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"success\",\n      className: \"add\",\n      onClick: this.handleNewQuestions,\n      disabled: !isEnabled || maxReached,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, \"Add Question\")), React.createElement(Col, {\n      className: \"questionListContainer\",\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"customQuestion\",\n      sm: 10,\n      style: {\n        right: \"40px\",\n        position: \"relative\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, \"Current List of Questions\"), React.createElement(\"img\", {\n      className: \"delete\",\n      alt: \"delete\",\n      onClick: this.removeQuestion,\n      src: require(\"./icons/trash.svg\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }), React.createElement(Input, {\n      type: \"select\",\n      name: \"Question List\",\n      id: \"customQuestion\",\n      multiple: true,\n      onChange: this.handleSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }))))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.setDeck,\n      disabled: !maxReached,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, \"Add to Deck\"))));\n  }\n\n}\n\nclass ModalQuestions extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      questionNumber: 0,\n      answer1Count: 0,\n      answer2Count: 0\n    };\n    this.toggle = this.toggle.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.incrementCount = this.incrementCount.bind(this);\n    this.addToFire = this.addToFire.bind(this);\n  } // this.props.max is the max number of questions\n  // this.props.questionList is the list of questions to display\n\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  nextQuestion() {\n    let num = this.state.questionNumber + 1;\n    this.setState({\n      questionNumber: num\n    });\n  }\n\n  handleAnswers(question, answer1, answer2, gotClicked) {\n    this.incrementCount(gotClicked);\n    let roomRef = firebase.database().ref(\"Rooms\").child(this.props.uid);\n    if (Room) roomRef.child(\"analysis\").push({\n      questionAsked: question,\n      answerOne: answer1,\n      answerTwo: answer2,\n      answerOneCount: this.state.answer1Count,\n      answerTwoCount: this.state.answer2Count\n    });\n    this.setState({\n      answerOneCount: 0,\n      answerTwoCount: 0\n    });\n  }\n\n  incrementCount(target) {\n    if (target === 1) {\n      let newNum = this.state.answer1Count + 1;\n      this.setState({\n        answer1Count: newNum\n      });\n    }\n\n    let newNum = this.state.answer2Count + 1;\n    this.setState({\n      answer2Count: newNum\n    });\n  }\n\n  addToFire() {\n    let n = 0;\n    let roomRef = firebase.database().ref(\"Rooms\").child(this.props.uid);\n\n    while (n < this.props.max) {\n      let entries = this.props.questionList;\n      let displayQuestion = entries[n];\n      let displayQuestionModal = displayQuestion[0];\n      let displayButton = displayQuestion[1];\n      let displayButton1 = displayButton[0];\n      let displayButton2 = displayButton[1];\n      roomRef.child(\"analysis\").push({\n        questionAsked: displayQuestionModal,\n        answerOne: displayButton1,\n        answerTwo: displayButton2,\n        answerOneCount: 0,\n        answerTwoCount: 0\n      });\n      n = n + 1;\n    }\n  }\n\n  render() {\n    if (this.props.questionList.length !== 0 && this.state.questionNumber < this.props.questionList.length) {\n      this.addToFire();\n      let entries = this.props.questionList;\n      let displayQuestion = entries[this.state.questionNumber];\n      let displayQuestionModal = displayQuestion[0];\n      let displayButton = displayQuestion[1];\n      let displayButton1 = displayButton[0];\n      let displayButton2 = displayButton[1];\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 672\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"danger\",\n        onClick: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673\n        },\n        __self: this\n      }, this.props.buttonLabel), React.createElement(Modal, {\n        isOpen: this.state.modal,\n        toggle: this.toggle,\n        className: this.props.className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 674\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675\n        },\n        __self: this\n      }, displayQuestionModal), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: () => this.handleAnswers(displayQuestionModal, displayButton1, displayButton2, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677\n        },\n        __self: this\n      }, displayButton1), ' ', React.createElement(Button, {\n        color: \"primary\",\n        onClick: () => this.handleAnswers(displayQuestionModal, displayButton1, displayButton2, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678\n        },\n        __self: this\n      }, displayButton2), ' ', React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.nextQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 679\n        },\n        __self: this\n      }, \"Next Question\"), ' ', React.createElement(Button, {\n        color: \"secondary\",\n        onClick: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 680\n        },\n        __self: this\n      }, \"Cancel\"))));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      className: this.props.className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, \"Organizer has not posted question yet\"), React.createElement(Chart, {\n      uid: this.props.uid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/veronicachang/Documents/hw7/src/GameManager.js"],"names":["React","Component","firebase","Input","InputGroup","InputGroupAddon","Label","Button","Col","Row","Form","Modal","ModalHeader","ModalFooter","ModalBody","Redirect","Chart","questionFile","require","MAX_QUESTIONS","MIN_QUESTIONS","GameManager","constructor","props","handleChange","e","isValid","target","value","name","document","getElementById","style","borderColor","visibility","str","replace","setState","fname","innerHTML","onClick","checked","state","uid","roomName","numQuestions","toggleAnalysis","created","bind","handleCreateRoom","componentDidMount","data","roomRef","database","ref","child","set","organizer","room_name","settings","Number_Questions","showAnalysis","analysis","placeholder","field","test","render","isEnabled","button","pathname","fontSize","borderRadius","width","height","background","color","display","justifyContent","padding","marginLeft","marginRight","marginTop","paddingLeft","fontWeight","Categories","handleQuestionDeck","category","id","deck","Object","entries","getQuestions","undefined","max","parseInt","parentState","questionDeck","obj","push","length","setDeck","alert","questions","toggleCustom","go","selected","handleRandomDeck","redirect","location","questionSet","randomTotal","Math","floor","random","count","index","includes","goButton","AddQuestion","trim","handleSelected","customDeck","question","answer2","answer1","removeQuestion","handleNewQuestions","isDuplicate","reset","renderOptions","select","opt","createElement","key","val","appendChild","entry","splice","fun","toggle","closeBtn","maxReached","open","right","position","ModalQuestions","modal","questionNumber","answer1Count","answer2Count","nextQuestion","incrementCount","addToFire","prevState","num","handleAnswers","gotClicked","Room","questionAsked","answerOne","answerTwo","answerOneCount","answerTwoCount","newNum","n","questionList","displayQuestion","displayQuestionModal","displayButton","displayButton1","displayButton2","buttonLabel","className"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport firebase from \"firebase/app\";\nimport './css/room.css';\nimport {\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    Label,\n    Button,\n    Col,\n    Row,\n    Form,\n    Modal,\n    ModalHeader,\n    ModalFooter,\n    ModalBody\n} from \"reactstrap\";\nimport { Redirect } from 'react-router-dom';\nimport Chart from './Analysis';\nconst questionFile = require(\"./questions.json\");\nconst MAX_QUESTIONS = 15;\nconst MIN_QUESTIONS = 1;\n\nexport class GameManager extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fname: \"First Name\",\n            uid: \"\",\n            roomName: \"\",\n            numQuestions: 5,\n            toggleAnalysis: false,\n            created: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.handleCreateRoom = this.handleCreateRoom.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({ uid: this.props.data.uid, roomName: \"Room-\" + this.props.data.uid });\n    }\n\n    handleCreateRoom() {\n        let roomRef = firebase.database().ref(\"Rooms\").child(this.state.uid);\n        roomRef.set({\n            organizer: this.state.fname,\n            uid: this.state.uid,\n            room_name: this.state.roomName,\n            settings: {\n                Number_Questions: this.state.numQuestions,\n                showAnalysis: this.state.toggleAnalysis\n            },\n            analysis: {\n                placeholder: \"Placeholder\"\n            }\n        });\n        this.setState({ created: true });\n    }\n\n    isValid(str, field) {\n        if (field === 'fname' && /^[a-zA-Z ]+$/.test(str)) {\n            return true;\n        } else if (field === 'roomName') {\n            return true;\n        } else if (str === \"\") {\n            return true;\n        }\n        return false;\n    }\n\n    handleChange = (e) => {\n        // Check the inputs are valid\n        if (this.isValid(e.target.value, e.target.name)) {\n            // Remove Error message\n            document.getElementById('fname').style.borderColor = \"grey\";\n            document.getElementById('error').style.visibility = \"hidden\";\n\n            let str = e.target.value.replace(/ /g, '_');\n            this.setState({\n                [e.target.name]: str\n            });\n        } else if (e.target.name === 'numQuestions') {\n            this.setState({\n                [e.target.name]: e.target.value\n            });\n        } else {\n            this.setState({ fname: \"\" });\n            e.target.value = \"\";\n            document.getElementById('error').innerHTML = \"Please enter a correct name without symbols.\";\n            document.getElementById('error').style.visibility = \"visible\";\n            document.getElementById('fname').style.borderColor = \"red\";\n        }\n    }\n\n    onClick = (e) => {\n        this.setState({\n            [e.target.name]: e.target.checked\n        });\n    }\n\n    render() {\n        let isEnabled = (this.state.fname !== \"\");\n        let button = null;\n        if (this.state.created) {\n            return <Redirect push to={{ pathname: \"/\" + this.state.roomName + \"/Categories/\", state: this.state }} />;\n        } else {\n            button = (\n                <Button\n                    onClick={this.handleCreateRoom}\n                    disabled={!isEnabled}\n                    style={{\n                        fontSize: \"18px\",\n                        borderRadius: \"20px\",\n                        width: \"200px\",\n                        height: \"2em\",\n                        background: \"#226597\",\n                        color: \"white\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        padding: \"0px\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        marginTop: \"50px\"\n                    }} >\n                    Create Room\n                </ Button>\n            )\n        }\n\n        return (\n            <div>\n                <div className=\"errorContainer\">\n                    <div id=\"error\"\n                        style={{ visibility: 'hidden' }}\n                        className=\"alert alert-danger\"\n                        role=\"alert\">\n                    </div>\n                </div>\n                <Form id=\"newRoom-form\">\n                    <h1 className=\"header\">Settings</h1>\n                    <Label style={{ marginTop: \"40px\" }}> Organizer Name </Label>\n                    <Input\n                        placeholder={this.state.fname}\n                        name=\"fname\"\n                        onChange={this.handleChange}\n                        id=\"fname\"\n                        style={{ borderRadius: \"20px\", paddingLeft: \"24px\" }}\n                    />\n                    <Label style={{ marginTop: \"20px\" }}>Custom Room Name</Label>\n                    <Input\n                        placeholder={this.state.roomName}\n                        name=\"roomName\"\n                        onChange={this.handleChange}\n                        id=\"roomName\"\n                        style={{ borderRadius: \"20px\", paddingLeft: \"24px\" }}\n                    />\n                    <Label style={{ marginTop: \"20px\" }}>Number of Icebreaker Questions</Label>\n                    <InputGroup>\n                        <Input\n                            placeholder={this.state.numQuestions}\n                            name=\"numQuestions\"\n                            min={MIN_QUESTIONS}\n                            max={MAX_QUESTIONS}\n                            type=\"number\"\n                            step=\"1\"\n                            defaultValue={5}\n                            onChange={this.handleChange}\n                        />\n                        <InputGroupAddon addonType=\"append\">Questions</InputGroupAddon>\n                    </InputGroup>\n                    <Label check style={{ marginTop: \"30px\", marginLeft: \"40px\", fontSize: \"16px\", color: \"#226597\", fontWeight: \"600\" }}>\n                        <input type=\"checkbox\"\n                            name=\"toggleAnalysis\"\n                            onClick={this.onClick}\n                        /> Show Analysis\n                    </Label>\n                    {button}\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport class Categories extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: [],\n            toggleCustom: false,\n            go: false,\n            selected: \"\"\n        }\n\n        this.handleRandomDeck = this.handleRandomDeck.bind(this);\n        this.toggleCustom = this.toggleCustom.bind(this);\n        this.redirect = this.redirect.bind(this);\n        this.setDeck = this.setDeck.bind(this);\n        this.parentState = this.props.location.state;\n    }\n\n    componentDidMount() {\n        // Check file whether file is empty\n        if (questionFile.length === 0) {\n            alert(\"An error occured while finding the questions, please try again later or contact the owner of the website\");\n        }\n    }\n\n    setDeck(deck, category) {\n        this.setState({\n            questions: deck,\n            selected: category\n        });\n    }\n\n    handleQuestionDeck = (e) => {\n        let category = e.target.id;\n        let deck = Object.entries(this.getQuestions(category));\n\n        if (deck !== undefined) {\n            let max = parseInt(this.parentState.numQuestions);\n            let questionDeck = [];\n            for (let obj of deck) {\n                questionDeck.push(obj);\n\n                if (questionDeck.length === max) {\n                    this.setDeck(questionDeck, category);\n                    break;\n                }\n            }\n        } else {\n            alert(\"An error occured while finding the questions, please try again later or contact the owner of the website\");\n        }\n    }\n\n    getQuestions(category) {\n        for (let questionSet of questionFile) {\n            if (questionSet.category === category) {\n                return questionSet.questions;\n            }\n        }\n        return undefined;\n    }\n\n    handleRandomDeck() {\n        let max = parseInt(this.parentState.numQuestions);\n        let deck = [];\n\n        for (let category of questionFile) {\n            let questionDeck = Object.entries(category.questions);\n            let randomTotal = Math.floor(Math.random() * (4 - 1) + 1);\n            let count = 0;\n\n            while (count <= randomTotal && deck.length !== max) {\n                let index = Math.floor(Math.random() * 15);\n\n                if (!deck.includes(questionDeck[index])) {\n                    deck.push(questionDeck[index])\n                } else {\n                    deck.push(questionDeck[index + 1 % 2])\n                }\n\n                // Check deck has correct number of questions and prevent from adding more questions\n                if (deck.length === max) {\n                    this.setDeck(deck, \"random\");\n                    break;\n                }\n                count++;\n            }\n        }\n    }\n\n    toggleCustom() {\n        this.setState({ toggleCustom: !this.state.toggleCustom });\n    }\n\n    redirect() {\n        this.setState({ go: !this.state.go });\n    }\n\n    render() {\n        let isEnabled = (this.state.questions.length === 0);\n        let goButton = null;\n        if (this.state.go) {\n            return <Redirect push to={{ pathname: \"/\" + this.parentState.roomName + \"/Room/\", uid: this.parentState.uid, deck: this.state.questions }} />;\n        } else {\n            goButton = (\n                <button className=\"goToRoom\" disabled={isEnabled} onClick={this.redirect}>\n                    Go to Room\n                </button>\n            );\n        }\n\n        return (\n            <div id=\"category\">\n                <h1>Categories</h1>\n                <Row>\n                    <Col>\n                        <div id={this.state.selected === \"travel\" ? \"selected\" : \"travel\"}>\n                            <div className=\"cata\" onClick={this.handleQuestionDeck} id=\"travel\">\n                                <img className=\"cataimg\" onClick={this.handleQuestionDeck} src={require(\"./icons/travel.png\")} id=\"travel\" alt=\"travel\" />\n                            </div>\n                        </div>\n                        <h3>Travel</h3>\n                    </Col>\n                    <Col>\n                        <div id={this.state.selected === \"food\" ? \"selected\" : \"food\"}>\n                            <div className=\"cata\" onClick={this.handleQuestionDeck} id=\"food\">\n                                <img className=\"cataimg\" onClick={this.handleQuestionDeck} src={require(\"./icons/food.png\")} id=\"food\" alt=\"food\" />\n                            </div>\n                        </div>\n                        <h3>Food</h3>\n                    </Col>\n                    <Col>\n                        <div id={this.state.selected === \"sports\" ? \"selected\" : \"sports\"}>\n                            <div className=\"cata\" onClick={this.handleQuestionDeck} id=\"sports\">\n                                <img className=\"cataimg\" onClick={this.handleQuestionDeck} src={require(\"./icons/sports.png\")} id=\"sports\" alt=\"sports\" />\n                            </div>\n                        </div>\n                        <h3>Sports</h3>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <div id={this.state.selected === \"music\" ? \"selected\" : \"music\"}>\n                            <div className=\"cata\" onClick={this.handleQuestionDeck} id=\"music\">\n                                <img className=\"cataimg\" onClick={this.handleQuestionDeck} src={require(\"./icons/music.png\")} id=\"music\" alt=\"music\" />\n                            </div>\n                        </div>\n                        <h3>Music</h3>\n                    </Col>\n                    <Col>\n                        <div id={this.state.selected === \"movies\" ? \"selected\" : \"movies\"}>\n                            <div className=\"cata\" onClick={this.handleQuestionDeck} id=\"movies\">\n                                <img className=\"cataimg\" onClick={this.handleQuestionDeck} src={require(\"./icons/movie.png\")} id=\"movies\" alt=\"movie\" />\n                            </div>\n                        </div>\n                        <h3>Movies</h3>\n                    </Col>\n                    <Col>\n                        <div id={this.state.selected === \"books\" ? \"selected\" : \"books\"}>\n                            <div className=\"cata\" onClick={this.handleQuestionDeck} id=\"books\">\n                                <img className=\"cataimg\" onClick={this.handleQuestionDeck} src={require(\"./icons/book.png\")} id=\"books\" alt=\"book\" />\n                            </div>\n                        </div>\n                        <h3>Books</h3>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <div id={this.state.selected === \"animals\" ? \"selected\" : \"animals\"}>\n                            <div className=\"cata\" onClick={this.handleQuestionDeck} id=\"animals\">\n                                <img className=\"cataimg\" onClick={this.handleQuestionDeck} src={require(\"./icons/animal.png\")} id=\"animals\" alt=\"animal\" />\n                            </div>\n                        </div>\n                        <h3>Animals</h3>\n                    </Col>\n                    <Col>\n                        <div id={this.state.selected === \"random\" ? \"selected\" : \"random\"}>\n                            <div className=\"cata\" onClick={this.handleRandomDeck} id=\"random\">\n                                <img className=\"cataimg\" onClick={this.handleRandomDeck} src={require(\"./icons/random.png\")} id=\"random\" alt=\"random\" />\n                            </div>\n                        </div>\n                        <h3>Random</h3>\n                    </Col>\n                    <Col>\n                        <div id={this.state.selected === \"customized\" ? \"selected\" : \"customized\"}>\n                            <div className=\"cata\" onClick={this.toggleCustom} id=\"customized\">\n                                <img className=\"cataimg\" onClick={this.toggleCustom} src={require(\"./icons/customized.png\")} id=\"customized\" alt=\"customized\" />\n                            </div>\n                        </div>\n                        <h3>Custom</h3>\n                    </Col>\n                </Row>\n                <AddQuestion fun={this.setDeck} open={this.state.toggleCustom} toggle={this.toggleCustom} state={this.parentState} />\n                <ModalQuestions questionList={this.state.questions} max={this.parentState.numQuestions} uid={this.parentState.uid} />\n                {goButton}\n            </div>\n        );\n    }\n}\n\nclass AddQuestion extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            customDeck: [],\n            question: \"\",\n            answer2: \"\",\n            answer1: \"\",\n            selected: \"\"\n        };\n\n        this.removeQuestion = this.removeQuestion.bind(this);\n        this.setDeck = this.setDeck.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleNewQuestions = this.handleNewQuestions.bind(this);\n        this.handleSelected = this.handleSelected.bind(this);\n    }\n\n    handleNewQuestions() {\n        let deck = this.state.customDeck;\n        if (this.isDuplicate()) {\n            // Remove Error message\n            document.getElementById('error').style.visibility = \"hidden\";\n            deck.push([this.state.question, [this.state.answer1, this.state.answer2]]);\n            document.getElementById(\"message\").innerHTML = \"You have \" + (parseInt(this.props.state.numQuestions) - this.state.customDeck.length) + \" questions to make!\";\n        } else {\n            this.setState({\n                question: \"\",\n                answer1: \"\",\n                answer2: \"\"\n            });\n            document.getElementById('addForm').reset();\n            document.getElementById('error').innerHTML = \"This is a duplicate question\";\n            document.getElementById('error').style.visibility = \"visible\";\n        }\n\n        this.setState({\n            customDeck: deck,\n            question: \"\",\n            answer1: \"\",\n            answer2: \"\"\n        });\n        document.getElementById('addForm').reset();\n        this.renderOptions();\n    }\n\n    isValid(str) {\n        if (/^[a-zA-Z0-9? ]+$/.test(str)) {\n            return true;\n        } else if (str === \"\") {\n            return true;\n        }\n        return false;\n    }\n\n    isDuplicate() {\n        let deck = this.state.customDeck;\n\n        if (deck.length !== 0) {\n            for (let obj of deck) {\n                if (obj[0] === this.state.question) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    handleChange = (e) => {\n        // Check the inputs are valid\n        if (this.isValid(e.target.value)) {\n            // Remove Error message\n            document.getElementById(e.target.name).style.borderColor = \"inherit\";\n            document.getElementById('error').style.visibility = \"hidden\";\n\n            this.setState({\n                [e.target.name]: e.target.value.trim()\n            });\n        } else {\n            this.setState({ [e.target.name]: \"\" });\n            e.target.value = \"\";\n            document.getElementById('error').innerHTML = \"Please enter a correct name without symbols.\";\n            document.getElementById('error').style.visibility = \"visible\";\n            document.getElementById(e.target.name).style.borderColor = \"red\";\n        }\n    }\n\n    handleSelected = (e) => {\n        this.setState({\n            selected: e.target.value\n        });\n    }\n\n    renderOptions() {\n        let data = this.state.customDeck;\n        let select = document.getElementById('customQuestion');\n        if (select !== null) {\n            select.innerHTML = \"\";\n        }\n\n        for (let obj of data) {\n            let opt = document.createElement('option');\n            let key = obj[0];\n            let val = obj[1];\n            opt.value = key;\n            opt.selected = this.state.selected === opt.value;\n            opt.innerHTML = key + \": \" + val;\n            select.appendChild(opt);\n        }\n    }\n\n    removeQuestion() {\n        let deck = this.state.customDeck;\n        for (let entry of deck) {\n            if (entry[0] === this.state.selected) {\n                deck.splice(entry[0], 1);\n            }\n        }\n        this.renderOptions();\n        document.getElementById(\"message\").innerHTML = \"You have \" + (parseInt(this.props.state.numQuestions) - this.state.customDeck.length) + \" questions to make!\";\n    }\n\n    setDeck() {\n        this.props.fun(this.state.customDeck, \"customized\");\n        this.props.toggle();\n        this.setState({\n            customDeck: []\n        });\n    }\n\n    render() {\n        const closeBtn = <button className=\"close\" onClick={this.props.toggle}>&times;</button>;\n        let isEnabled = (this.state.question !== \"\" && this.state.answer1 !== \"\" && this.state.answer2 !== \"\");\n        let maxReached = (parseInt(this.props.state.numQuestions) === this.state.customDeck.length);\n        return (\n            <div>\n                <Modal className=\"addCustomQuestions\" isOpen={this.props.open} toggle={this.props.toggle}>\n                    <ModalHeader toggle={this.toggle} close={closeBtn} >Build your own deck of questions!</ModalHeader>\n                    <ModalBody>\n                        <div className=\"errorContainer\">\n                            <div id=\"error\"\n                                className=\"alert alert-danger\"\n                                role=\"alert\"\n                                style={{ visibility: 'hidden' }}\n                            >\n                            </div>\n                        </div>\n                        <h2 id=\"message\">You have {parseInt(this.props.state.numQuestions) - this.state.customDeck.length} questions to make!</h2>\n                        <Form id=\"addForm\">\n                            <Row>\n                                <Col className=\"addQuestionContainer\" sm={6}>\n                                    <Label for=\"question\">Question</Label>\n                                    <Input\n                                        type=\"question\"\n                                        name=\"question\"\n                                        id=\"question\"\n                                        placeholder={this.state.question}\n                                        onChange={this.handleChange}\n                                    />\n                                    <Label for=\"exampleCity\">Answer 1</Label>\n                                    <Input type=\"answer1\"\n                                        name=\"answer1\"\n                                        id=\"answer1\"\n                                        onChange={this.handleChange}\n                                    />\n                                    <Label for=\"exampleState\">Answer 2</Label>\n                                    <Input type=\"answer2\"\n                                        name=\"answer2\"\n                                        id=\"answer2\"\n                                        onChange={this.handleChange}\n                                    />\n                                    <Button color=\"success\" className=\"add\" onClick={this.handleNewQuestions} disabled={!isEnabled || maxReached}>Add Question</Button>\n                                </Col>\n                                <Col className=\"questionListContainer\" sm={6}>\n                                    <Label for=\"customQuestion\" sm={10} style={{ right: \"40px\", position: \"relative\" }}>Current List of Questions</Label>\n                                    <img className=\"delete\" alt=\"delete\" onClick={this.removeQuestion} src={require(\"./icons/trash.svg\")} />\n                                    <Input type=\"select\"\n                                        name=\"Question List\"\n                                        id=\"customQuestion\"\n                                        multiple\n                                        onChange={this.handleSelected}\n                                    >\n                                    </Input>\n                                </Col>\n                            </Row>\n                        </Form>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"primary\" onClick={this.setDeck} disabled={!maxReached}>Add to Deck</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nclass ModalQuestions extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            questionNumber: 0,\n            answer1Count: 0,\n            answer2Count: 0\n        };\n        this.toggle = this.toggle.bind(this);\n        this.nextQuestion = this.nextQuestion.bind(this);\n        this.incrementCount = this.incrementCount.bind(this);\n        this.addToFire = this.addToFire.bind(this);\n    }\n\n    // this.props.max is the max number of questions\n    // this.props.questionList is the list of questions to display\n    toggle() {\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n    }\n\n    nextQuestion() {\n        let num = this.state.questionNumber + 1;\n        this.setState({ questionNumber: num });\n    }\n\n    handleAnswers(question, answer1, answer2, gotClicked) {\n        this.incrementCount(gotClicked);\n        let roomRef = firebase.database().ref(\"Rooms\").child(this.props.uid);\n\n        if(Room)\n\n        roomRef.child(\"analysis\").push({\n            questionAsked: question,\n            answerOne: answer1,\n            answerTwo: answer2,\n            answerOneCount: this.state.answer1Count,\n            answerTwoCount: this.state.answer2Count\n        });\n        this.setState({\n            answerOneCount:0,\n            answerTwoCount:0\n        })\n    }\n\n    incrementCount(target) {\n        if (target === 1) {\n            let newNum = this.state.answer1Count + 1;\n            this.setState({\n                answer1Count: newNum\n            });\n        }\n        let newNum = this.state.answer2Count + 1;\n        this.setState({\n            answer2Count: newNum\n        });\n    }\n\n    addToFire() {\n        let n = 0;\n        let roomRef = firebase.database().ref(\"Rooms\").child(this.props.uid);\n        while (n < this.props.max) {\n            let entries = this.props.questionList;\n            let displayQuestion = entries[n];\n            let displayQuestionModal = displayQuestion[0];\n            let displayButton = displayQuestion[1];\n            let displayButton1 = displayButton[0];\n            let displayButton2 = displayButton[1];\n            roomRef.child(\"analysis\").push({\n                questionAsked: displayQuestionModal,\n                answerOne: displayButton1,\n                answerTwo: displayButton2,\n                answerOneCount: 0,\n                answerTwoCount: 0\n            });\n            n = n + 1;\n        }\n    }\n\n\n    render() {\n        if (this.props.questionList.length !== 0 && this.state.questionNumber < this.props.questionList.length) {\n            this.addToFire();\n            let entries = this.props.questionList;\n            let displayQuestion = entries[this.state.questionNumber];\n            let displayQuestionModal = displayQuestion[0];\n            let displayButton = displayQuestion[1];\n            let displayButton1 = displayButton[0];\n            let displayButton2 = displayButton[1];\n            return (\n                <div>\n                    <Button color=\"danger\" onClick={this.toggle}>{this.props.buttonLabel}</Button>\n                    <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n                        <ModalHeader toggle={this.toggle}>{displayQuestionModal}</ModalHeader>\n                        <ModalFooter>\n                            <Button color=\"primary\" onClick={() => this.handleAnswers(displayQuestionModal, displayButton1, displayButton2, 1)}>{displayButton1}</Button>{' '}\n                            <Button color=\"primary\" onClick={() => this.handleAnswers(displayQuestionModal, displayButton1, displayButton2, 2)}>{displayButton2}</Button>{' '}\n                            <Button color=\"primary\" onClick={this.nextQuestion}>Next Question</Button>{' '}\n                            <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </div>\n            );\n        }\n        return (\n            <div>\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n                    <p>Organizer has not posted question yet</p>\n                    <Chart uid={this.props.uid}/>\n                </Modal>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}